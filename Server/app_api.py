from datetime import datetime
import time
import psutil
import platform
from typing import List
from fastapi import Body, FastAPI, HTTPException, Request
from fastapi.exceptions import RequestValidationError
from fastapi.responses import HTMLResponse, JSONResponse
import uvicorn

from DataModels.DataModel import InitSessionRequest, ChunckRequest, InputDataItem, FinalizeSessionRequest
from Controls import scanAttackControl as sa_control
from Controls.serverInformationControl import get_uptime

app = FastAPI()

 #–í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏
CHUNK_STORAGE: dict[str, list[list[InputDataItem]]] = {}

start_time = time.time()

@app.get("/Server_Heath")
def ServerHealth():

    server_status = "healthy"
    
    uptime = get_uptime(start_time)

    system_info = {
        "os": platform.system(),
        "os_version": platform.version(),
        "uptime": uptime,
        "cpu_usage": psutil.cpu_percent(interval=0.1),
        "memory_usage": psutil.virtual_memory().percent,
        "status": server_status
    }

    html = f"""
    <html>
        <head>
            <title>Server Status</title>
            <style>
                body {{
                    background-color: #f2f2f2;
                    font-family: Arial, sans-serif;
                    text-align: center;
                    padding: 50px;
                }}
                .container {{
                    background: white;
                    padding: 30px;
                    border-radius: 10px;
                    box-shadow: 0 0 10px rgba(0,0,0,0.1);
                    max-width: 500px;
                    margin: auto;
                }}
                h1 {{
                    color: #2c3e50;
                }}
                .status {{
                    color: green;
                    font-weight: bold;
                }}
                .info {{
                    margin-top: 20px;
                    text-align: left;
                }}
                .info p {{
                    margin: 5px 0;
                }}
                footer {{
                    margin-top: 40px;
                    font-size: 0.9em;
                    color: #aaa;
                }}
            </style>
        </head>
        <body>
            <div class="container">
                <h1>üåê –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞</h1>
                <p>–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ.</p>
                <p class="status">–°—Ç–∞—Ç—É—Å: Healthy</p>

                <div class="info">
                    <p>–û–°: {system_info['os']}</p>
                    <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {system_info['uptime']}</p>
                    <p>CPU –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å: {system_info['cpu_usage']}%</p>
                    <p>–ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è: {system_info['memory_usage']}%</p>
                </div>

                <footer>
                    &copy; {datetime.now().year} –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–µ—Ä–≤–µ—Ä–∞
                </footer>
            </div>
        </body>
    </html>
    """
    return HTMLResponse(content=html)

#–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–π
@app.post("/init_session")
async def init_session(payload: InitSessionRequest):
    session_id = payload.session_id
    total_chunks = payload.total_chunks

    if not session_id or not isinstance(session_id, str):
        raise HTTPException(status_code=400, detail="session_id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π")

    CHUNK_STORAGE[session_id] = {
        "total_chunks": total_chunks,
        "received_chunks": 0,
        "data": [],
        "is_complete": False
    }

    return {"status": "ok", "message": "–°–µ—Å—Å–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞"}

#–î–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ —á–∞–Ω–∫–∞–º–∏
@app.post("/scan_attack_from_file")
async def receive_chunk(request: ChunckRequest):
    try:

        session_id = request.session_id
        chunk_index = request.chunk_index
        is_last_chunk = request.is_last_chunk
        data = request.data

        if session_id not in CHUNK_STORAGE:
            raise HTTPException(status_code=400, detail="—Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

        session = CHUNK_STORAGE[session_id]
        if session["is_complete"]:
            raise HTTPException(status_code=400, detail="–°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        session["data"].extend(data)
        session["received_chunks"] += 1

        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"[SERVER] –ü–æ–ª—É—á–µ–Ω —á–∞–Ω–∫ {chunk_index} –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}. –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ: {session['received_chunks']}/{session['total_chunks']}")

        if is_last_chunk:
            print(f"[SERVER] –ü–æ—Å–ª–µ–¥–Ω–∏–π —á–∞–Ω–∫ –ø–æ–ª—É—á–µ–Ω –¥–ª—è —Å–µ—Å—Å–∏–∏ {session_id}")

        return {"status": "ok", "chunk_received": chunk_index}
    except Exception as e:
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞: {str(e)}")

@app.post("/finalize_session")
async def finalize_session(request: Request):
    session_id = (await request.body()).decode("utf-8").strip()

    if not session_id or session_id not in CHUNK_STORAGE:
        raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–π session_id")

    session = CHUNK_STORAGE[session_id]

    #–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é —Å–µ—Å—Å–∏—é
    if session["is_complete"]:
        return {"status": "–°–µ—Å—Å–∏—è —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "result": session.get("result")}

    #–ü—Ä–µ–¥–∏–∫—Ç –º–æ–¥–µ–ª–∏
    predict = sa_control.scan_file_to_attack(session["data"])


    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
    print(f"[SERVER] –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ {session_id}, –≤—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(session['data'])}")

    result = {
        "status": "success",
        "session_id": session_id,
    }

    #–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ result –∏ predict
    result.update(predict)

    # –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –±–¥ - –µ—Å–ª–∏ –±—É–¥–µ—Ç 
    session["result"] = result
    session["is_complete"] = True

    #–û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    del CHUNK_STORAGE[session_id]

    return result

@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request, exc):
    print("Validation error:", exc.errors())
    return JSONResponse(
        status_code=422,
        content={"detail": exc.errors()}
    )

if __name__ == '__main__':
    uvicorn.run(app, host="127.0.0.1", port=5000)
    



